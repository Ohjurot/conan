# Dictionary for version to year lookups
PREMAKE_VS_VERSION = {
    # Visual Studio -> Year
    # https://en.wikipedia.org/wiki/Visual_Studio#History
    '8'     :   '2005',
    '9'     :   '2008',
    '10'    :   '2010',
    '11'    :   '2012',
    '12'    :   '2013',
    '14'    :   '2015',
    '15'    :   '2017',
    '16'    :   '2019',
    '17'    :   '2022',

    # MSVC -> Year 
    # https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
    '14.0'  :   '2005',
    '15.0'  :   '2008',
    '16.0'  :   '2010',
    '17.0'  :   '2012',
    '18.0'  :   '2013',
    '19.0'  :   '2015',
    '19.1'  :   '2017',
    '19.10' :   '2017',
    '19.11' :   '2017',
    '19.12' :   '2017',
    '19.13' :   '2017',
    '19.14' :   '2017',
    '19.16' :   '2017',
    '19.2'  :   '2019',
    '19.20' :   '2019',
    '19.21' :   '2019',
    '19.22' :   '2019',
    '19.23' :   '2019',
    '19.24' :   '2019',
    '19.25' :   '2019',
    '19.26' :   '2019',
    '19.27' :   '2019',
    '19.28' :   '2019',
    '19.29' :   '2019',
    '19.3'  :   '2022',
    '19.30' :   '2022',
    '19.32' :   '2022',
    '19.33' :   '2022',
    '19.34' :   '2022',
    '19.35' :   '2022',
    '19.36' :   '2022',
}

class Premake(object):
    def __init__(self, conanfile):
        self._conanfile = conanfile

        # Accessible members
        self.action = None                  # premake5 action to use (Autogenerated)
        self.luafile = "premake5.lua"       # Path to the index lua file
        self.compiler = None                # Compiler to uses (clang or gcc)
        self.arguments = {}                 # https://premake.github.io/docs/Command-Line-Arguments/ 
                                            # (As key value pairs. Will translate to "--{key}={value}")

        # We will find the right action depending on OS and Compiler Version
        os_name = str(self._conanfile.settings.os)
        if os_name == 'Windows':
            # Visual studio version detection
            cxx_version = str(self._conanfile.settings.compiler.version)
            if cxx_version not in PREMAKE_VS_VERSION:
                # raise
                pass
            self.action = f'vs{PREMAKE_VS_VERSION[cxx_version]}'
        elif os_name == 'Linux':
            self.action = 'gmake2'
            # Detect gcc or clang
            cxx_name = str(self._conanfile.settings.compiler)
            if 'gcc' in cxx_name:
                self.compiler = 'gcc'
            elif 'clang' in cxx_name:
                self.compiler = 'clang'
        elif os_name == 'OSX':
            # No detection for OSX required currently
            self.action = 'xcode4'
        else:
            # raise
            pass

    def _expand_args(self, args):
        return ' '.join([f'--{key}={value}' for key, value in args.items()])

    def configure(self):
        # Generate options depending on system
        premake_options = dict()
        premake_options["file"] = self.luafile
        if self.compiler: 
            premake_options["cc"] = self.compiler

        # TODO: Set PREMAKE_PATH env to binary bindirs (maybe)
        
        # Build premake command
        premake_command = f'premake5 {self._expand_args(premake_options)} {self.action} {self._expand_args(self.arguments)}'
        self._conanfile.run(premake_command)
            
